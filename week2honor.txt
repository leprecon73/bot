/*
Week2, Honors Assignmenit.
*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>

#define EXPER 1000000 // One million experiments by task

// suits: clubs (♣), diamonds (♦), hearts (♥) and spades (♠)
typedef enum Suits {Clubs,Diamonds,Hearts,Spades,Tns}Suits; //Tns - total number of suits
// rank: 2-10, Jack, Queen, King, Ace.
typedef enum Ranks {Two,Three,Four,Five,Six, Seven,Eight,Nine,Ten,\
		    Jack,Queen,King,Ace,Tnr}Ranks; //Tnr - total number of ranks

#define DSIZE (Tns * Tnr) // Tns * Tnr = 4 * 13 = 52, Classic poker deck size 
	    
//Using a struct to define a card, by task
typedef struct Card {char *suit; char *rank;}Card;

typedef struct Marker{char *rank; int cnt;}Marker;

char* get_suit_name(enum Suits);	    //Return string of Suits
char* get_rank_name(enum Ranks);	    //Return string of Ranks
void fill_deck(Card []);		    //Fill array of structs with the cards
void shuffle_deck(Card []);		    //Shuffle the deck
void check_combination(Card [], int []);    //Check combination
void print_comb(Card dealout[], char *);    //Just for sure, not necessary

int main () {
	int i,j,k;
	Card dk[DSIZE];
	Card dealout[7]; 
	int comb[6] = {0}; //0-no pair, 1-one pair, 2-two pair, 3-three of a kind, 
			   //4-full house and 5-four of a kind
	fill_deck(dk); 

	//Deal out 7 card hands EXPER times and check combinations.
	for(i = 0; i < EXPER; i++){
		shuffle_deck(dk);
		
		for(j = DSIZE-1, k = 0; j > DSIZE-8; j--, k++)
			dealout[k] = dk[j];
	
		check_combination(dealout, comb);
	}

	printf("\nFinally, after %d deals we've got:\n", EXPER);
	printf("------------------------------------------------------\n");
	printf(" Four of a kind:\t%d\t probability %f.\n",comb[5], (float)comb[5]/EXPER);
	printf(" Full house:\t\t%d\t probability %f.\n",comb[4], (float)comb[4]/EXPER);
	printf(" Three of a kind:\t%d\t probability %f.\n",comb[3], (float)comb[3]/EXPER);
	printf(" Two pair:\t\t%d\t probability %f.\n",comb[2], (float)comb[2]/EXPER);
	printf(" Pair:\t\t\t%d\t probability %f.\n",comb[1], (float)comb[1]/EXPER);
	printf(" No Pair:\t\t%d\t probability %f.\n",comb[0], (float)comb[0]/EXPER);
	printf("-------------------------------------------------------\n");
	printf(" Total checksum:\t%d\n",comb[0]+comb[1]+comb[2]+comb[3]+comb[4]+comb[5]);
	return 0;
}
void fill_deck(Card dk[])
{   
	int i, s, r; //s - for suits, r - for ranks, i - for array through
	i = 0;
	for(s = 0; s < Tns; s++){
		for(r = 0; r < Tnr; r++){
			dk[i].suit =  get_suit_name(s);
			dk[i++].rank = get_rank_name(r);
		}
	}
}
void shuffle_deck(Card dk[])
{
		struct timeval tv;	//Gives the number of seconds and 
					//microseconds since the Epoc
		gettimeofday(&tv, NULL);//Get time from a timezone
		int usec = tv.tv_usec;  //Microseconds from timeval struct
		srand48(usec);          //Function for initialization drand48()

		size_t i;
		//Randomly chose a 'j' element and switch it with 'i' element
		//walking through array
		for (i = DSIZE-1; i > 0; i--) {
			size_t j = (unsigned int)(drand48()*(i+1));
			Card t = dk[j];
			dk[j] = dk[i];
			dk[i] = t;
		}
}


char* get_suit_name(enum Suits suit)
{
	switch (suit){
	case Clubs: return "Clubs";break;
	case Diamonds: return "Diamonds";break;
	case Hearts: return "Hearts";break;
	case Spades: return "Spades";break;
	}
}
char* get_rank_name(enum Ranks rank)
{
	switch (rank){
	case Two: return "Two";break;
	case Three: return "Three";break;
	case Four: return "Four";break;
	case Five: return "Five";break;
	case Six: return "Six";break;
	case Seven: return "Seven";break;
	case Eight: return "Eight";break;
	case Nine: return "Nine";break;
	case Ten: return "Ten";break;
	case Jack: return "Jack";break;
	case Queen: return "Queen";break;
	case King: return "King";break;
	case Ace: return "Ace";break;
	}
}
void print_comb(Card dealout[], char *t)// Just for sure!!!
{
	printf("%s) ", t);
	for(int k = 0; k < 7; k++)
		printf("%s-%s ", dealout[k].suit, dealout[k].rank);
	printf("\n");
}
void check_combination(Card dealout[], int comb[])
{	//comb[]	
	//0-no pair, 1-one pair, 2-two pair, 3-three of a kind, 
        //4-full house and 5-four of a kind

	//Markers
	Marker mark[Tnr];
	int two1, two2, three;
	two1 = two2 = three = 0;

	for(int i = 0; i < Tnr; i++){ //Initialization
		mark[i].rank =  get_rank_name(i);
		mark[i].cnt = 0;
	}
	
	for(int i = 0; i < 7; i++)	        //Counts coincidence of each rank
		for(int j = 0; j < Tnr; j++){   //and store it to the struct Mark.
			if(dealout[i].rank == mark[j].rank){
				mark[j].cnt++;
				break;
			}
		}
	for(int i = 0; i < Tnr; i++){
		if(mark[i].cnt == 4){ //We've got Four of a kind
			comb[5]++;
			//print_comb(dealout, "Four of a kind"); //Uncomment function for control 
			return;
		}
		else if (mark[i].cnt == 3)  //Three, may be Full House
			three = 1;
		else if (mark[i].cnt == 2) {//Pair or two Pair ...three?
			if(!two1)
				two1 = 1;   //First Pair
			else if (two1 && !two2)
				two2 = 1;   //Second Pair
		}
	}
	if(three && two1){ // Full house
		comb[4]++;
		//print_comb(dealout,"Full house"); //Uncomment function for control
		return;
	}
	else if (three && !two1){ //Three of a kind
		comb[3]++;
		//print_comb(dealout, "Three of a kind"); //Uncomment function for control	
		return;
	}
	else if (two1 && two2){ //Two Pair
		comb[2]++;
		//print_comb(dealout,"Two Pair"); //Uncomment function for control	
		return;
	}
	else if (two1){ //One Pair
		comb[1]++;
		//print_comb(dealout, "One Pair"); //Uncomment function for control	
		return;
	}
	else { //No pair
		comb[0]++;
		//print_comb(dealout, "No Pair"); //Uncomment function for control
		return;
	}
}

