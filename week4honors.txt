/*
 Week4, Honors-List
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node{
	char d;
	struct node* left;
	struct node* right;
};

typedef struct node NODE;
typedef NODE *BTREE;


int count_data(FILE *fptr) //Return first number from text.txt
{	
	int i = 0;
        char c, buff[5]; //with a margin
        while((c=fgetc(fptr)) != ' '){ //by the task
                       buff[i] = c;
		       i++;
	}
	buff[i] = '\0';
 
        return atoi(buff);
}

void place_data(FILE *fptr, int data[], int size) //Fill array with numbers
{
	int i = 0;
        char c, buff[1000]; //with a margin
        while((c=fgetc(fptr))!=EOF) {
                       buff[i] = c;
                i++;
        }
	buff[i] = '\0', i = 0;
	char *ptr = strtok(buff, " ");
 
        while (ptr != NULL)
        {
		if(i >= size) //Use protection
			exit(1);
		data[i++] = atoi(ptr);
                ptr = strtok(NULL, " ");
        }
}

void inorder(BTREE root)
{
	if(root != NULL){
		inorder(root->left);
		printf("%d ", root->d);
		inorder(root->right);
	}
}

BTREE new_node(void)
{ return(malloc(sizeof(NODE)));}

BTREE init_node(int d1, BTREE p1, BTREE p2)
{
	BTREE t;
	t = new_node();
	t->d=d1;
	t->left=p1;
	t->right=p2;
	return t;
}

BTREE create_tree(int a[], int i, int size)
{   	
	if(i >= size)
		return NULL;
	else
		return (init_node(a[i],create_tree(a, 2*i+1, size),create_tree(a, 2*i+2, size)));
}


int main()
{	
	int size=0;
	FILE *fptr;
	BTREE b;
	//Opening text.txt file from the current dir
	//Use something $echo "10 3 9 93 16 8 45 13 4 68 2" > text.txt to create it
	if ((fptr = fopen("./text.txt","r")) == NULL){
		printf("Error! opening file.\n");
	        exit(1);
	}

	size = count_data(fptr);   
	int data[size];		    //by the task

	place_data(fptr, data, size);
	b = create_tree(data, 0, size);
	inorder(b);
	printf("\n");

	fclose(fptr);

	return 0;
}
